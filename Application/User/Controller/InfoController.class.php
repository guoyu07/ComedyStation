<?php
/**
 * Created by PhpStorm.
 * User: noble4cc
 */

namespace User\Controller;

use Common\Controller\BaseController;
use Common\Model\JokeModel;
use Common\Model\UserModel;
use Think\Page;
use Common\Model\CommentModel;

class InfoController extends BaseController
{
    function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $user_mod = D('user');
        $user = $user_mod->order('rand()')->limit('0,15')->select();
        $this->assign('user_list', $user);
    }

    /**
     * 用户的最近记录
     */
    public function index()
    {
        switch (I('type')) {
            case 'all':
                $time = 0;
                break;
            case 'week':
                $time = time() - 7 * 24 * 3600;
                break;
            case 'month':
                $time = time() - 30 * 24 * 3600;
                break;
            case 'income':
                $time = 0;
                $type = 1;
                break;
            case 'cost':
                $time = 0;
                $type = 2;
                break;
            default:
                $time = 0;
                break;
        }
        $Trace = D('Trace');
        $count = $Trace->where(['user_id' => $this->user['id']])->count();
        if (I('type') == 'cost' || I('type') == 'income') {
            $count = $Trace->where(['user_id' => $this->user['id'], 'type' => $type])->count();
            $page = new Page($count, C('PAGE_SIZE'), ['p' => I('p')]);
            $traces = $Trace->where(['user_id' => $this->user['id'], 'type' => $type])->where("created_time>=$time")
                ->limit($page->firstRow . ',' . $page->listRows)->select();
        } else {
            $count = $Trace->where(['user_id' => $this->user['id']])->count();
            $page = new Page($count, C('PAGE_SIZE'), ['p' => I('p')]);
            $traces = $Trace->where(['user_id' => $this->user['id']])->where("created_time>=$time")
                ->limit($page->firstRow . ',' . $page->listRows)->select();
        }
        $this->assign('page', $page->show());
        $this->assign('trace', $traces);
        $this->assign('type', I('type') ? I('type') : 'all');
        $this->assign('title', '我的信息');
        $this->assign('type', I('type') ? I('type') : 'all');
        $this->display();
    }

    /**
     * 用户发布的笑话
     */
    public function jokes()
    {
        switch (I('type')) {
            case 1:
                $status = JokeModel::JOKE_STATUS_NEW;
                break;
            case 2:
                $status = JokeModel::JOKE_STATUS_VALID;
                break;
            case 3:
                $status = JokeModel::JOKE_STATUS_DEL;
                break;
        }
        $Joke = D('Joke');
        if (!I('type') || I('type') == 'all') {
            $count = $Joke->where(['user_id' => $this->user['id']])->count();
            $page = new Page($count, C('PAGE_SIZE'), ['p' => I('p')]);
            $jokes = $Joke->where(['user_id' => $this->user['id']])
                ->limit($page->firstRow . ',' . $page->listRows)->select();
        } else {
            $count = $Joke->where(['user_id' => $this->user['id'], 'status' => $status])->count();
            $page = new Page($count, C('PAGE_SIZE'), ['p' => I('p')]);
            $jokes = $Joke->where(['user_id' => $this->user['id'], 'status' => $status])
                ->limit($page->firstRow . ',' . $page->listRows)->select();
        }
        $this->assign('page', $page->show());
        $this->assign('joke', $jokes);
        $this->assign('type', I('type') ? I('type') : 'all');
        $this->assign('title', '我的投稿');
        $this->display();
    }

    /**
     * 用户的个人信息
     */
    public function data()
    {
        $this->display();
    }

    /**
     * 用户的评论
     */
    public function review()
    {
        $Comment = D('Comment');
        $count = $Comment->where(['user_id' => $this->user['id'], 'status' =>CommentModel::COMMENT_STATUS_VALID ])->count();
        $page = new Page($count, C('PAGE_SIZE'), ['p' => I('p')]);
        $comments = $Comment->relation(true)->where(['user_id' => $this->user['id'], 'status' => CommentModel::COMMENT_STATUS_VALID])
            ->limit($page->firstRow . ',' . $page->listRows)->select();
        $this->assign('page', $page->show());
        $this->assign('review', $comments);
        $this->assign('title', '我的评论');
        $this->display();
    }

    /**
     * 修改QQ号码
     */
    public function setQQ()
    {
        if (IS_AJAX) {
            if (trim($_POST['qq']) == '') {
                $this->ajaxReturn(array('err' => 0, 'msg' => 'QQ不能为空!'));
            }
            $User = D('User');
            if ($User->where(['id' => $this->user['id']])->save(array('qq' => $_POST['qq']))) {
                $this->ajaxReturn(array('err' => 1, 'msg' => '修改成功!'));
            } else {
                $this->ajaxReturn(array('err' => 0, 'msg' => '修改失败!'));
            }
        }
    }

    /**
     * 设置电话
     */
    public function sethone()
    {
        if (IS_AJAX) {
            if (trim($_POST['phone']) == '') {
                $this->ajaxReturn(array('err' => 0, 'msg' => '手机号不能为空!'));
            }
            $User = D('user');
            if ($User->where(['id' => $this->user['id']])->save(array('phone' => $_POST['phone']))) {
                $this->ajaxReturn(array('err' => 1, 'msg' => '修改成功!'));
            } else {
                $this->ajaxReturn(array('err' => 0, 'msg' => '修改失败!'));
            }
        }
    }


    /**
     * 重设密码
     */
    public function setPassword()
    {
        if (IS_AJAX) {
            if ($_POST['password'] != $_POST['confirm_password']) {
                $this->ajaxReturn(array('err' => 0, 'msg' => '两次密码不一样!'));
            }
            $User = D('ResetPassword');
            $User->id = $this->user['id'];
            if ($User->create()) {
                $User->setPassword();
                $this->ajaxReturn(['err' => 1, 'msg' => '修改成功']);
            } else {
                $this->ajaxReturn(['err' => 0, 'msg' => $User->getError()]);
            }
        }
    }

    /**
     * 修改邮箱
     */
    public function setEmail()
    {
        if (IS_AJAX) {
            $email = trim($_POST['email']);
            if ($email == '') {
                $this->ajaxReturn(array('err' => 0, 'msg' => 'Email不能为空!'));
            }
            $User = D('User');
            $user = $User->where("id!={$this->user['id']} and email='{$email}'")->find();
            if ($user) {
                $this->ajaxReturn(array('err' => 0, 'msg' => 'Email已存在!'));
            }
            if ($User->where(['id' => $this->user['id']])->save(array('email' => $email))) {
                $this->ajaxReturn(array('err' => 1, 'msg' => '修改成功!'));
            } else {
                $this->ajaxReturn(array('err' => 0, 'msg' => '修改失败!'));
            }
        }
    }

    public function setAvatar()
    {
        if (IS_AJAX) {
            $x = $_POST['x'];
            $y = $_POST['y'];
            $w = $_POST['width'];
            $h = $_POST['height'];
            $url = $_POST['url'];

            if (trim($x) == '' || trim($y) == '' || trim($w) == '' || trim($h) == '' || trim($url) == '') {
                $this->ajaxReturn(array('err' => 0, 'msg' => '参数不能为空!'));
            }
            $img = cut_img('.' . $url, $x, $y, $w, $h);
            $User = D('user');
            if ($User->where("id= {$this->user['id']}")->save(array('avatar' => substr($img, 1)))) {
                $this->ajaxReturn(array('err' => 1, 'msg' => substr($img, 1)));
            } else {
                $this->ajaxReturn(array('err' => 0, 'msg' => '修改失败!'));
            }
        }
    }

    /**
     * 上传头像
     */
    public function uploadify()
    {
        $targetFolder = 'avatar/';
        if (!empty($_FILES)) {
            $url = upload_file($targetFolder, false);
            $img_info = getimagesize($url);
            $width = $img_info[0];
            $height = $img_info[1];
            $this->ajaxReturn(array('status' => 1, 'info' => '上传成功', 'url' => $url, 'width' => $width, 'height' => $height));
        }
    }


}